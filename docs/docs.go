// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@cryptotradingapi.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/account/snapshot": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve daily snapshots of Futures account balance and positions (historical data, 7-30 days)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account snapshot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Start time (Unix timestamp in milliseconds)",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "End time (Unix timestamp in milliseconds)",
                        "name": "endTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of days (7-30, default 7)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account snapshot retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get account snapshot",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/balance": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve current account balance and asset information from Binance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Get account balance",
                "responses": {
                    "200": {
                        "description": "Account balance retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get account balance",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/exchange/info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve trading rules, minimum order sizes, and symbol information from Binance",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get exchange info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by specific symbol (e.g., BTCUSDT). If not provided, returns all symbols.",
                        "name": "symbol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange info retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get exchange info",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/funding/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get historical funding rates for a symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding"
                ],
                "summary": "Get funding rate history",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BTCUSDT\"",
                        "description": "Trading symbol",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "example": 100,
                        "description": "Number of records (default: 100, max: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 1640000000,
                        "description": "Start timestamp (seconds)",
                        "name": "startTime",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "example": 1650000000,
                        "description": "End timestamp (seconds)",
                        "name": "endTime",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Funding rate history retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/binance.FundingRateHistory"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing symbol parameter",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get funding rate history",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/funding/rate": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get current funding rate for a symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Funding"
                ],
                "summary": "Get funding rate",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BTCUSDT\"",
                        "description": "Trading symbol",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Funding rate retrieved",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/binance.FundingRateInfo"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing symbol parameter",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get funding rate",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/orders": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all pending orders, optionally filtered by symbol",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get pending orders",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by trading symbol (e.g., BTCUSDT)",
                        "name": "symbol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending orders retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get pending orders",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/orders/cancel": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Cancel pending orders by symbol, specific order ID, or all orders",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel orders",
                "parameters": [
                    {
                        "description": "Cancel parameters (optional)",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.CancelOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Orders cancelled successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to cancel orders",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/position/close": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Close an open futures position for a specific symbol",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Positions"
                ],
                "summary": "Close position",
                "parameters": [
                    {
                        "description": "Close position parameters",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ClosePositionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Position closed successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to close position",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/positions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all open futures positions with profit/loss information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Positions"
                ],
                "summary": "Get open positions",
                "responses": {
                    "200": {
                        "description": "Open positions retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get open positions",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/risk/liquidation": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Calculate liquidation risk and distance to liquidation for a position",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Risk Management"
                ],
                "summary": "Get liquidation risk",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"BTCUSDT\"",
                        "description": "Trading symbol",
                        "name": "symbol",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Liquidation risk calculated",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/binance.LiquidationRisk"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing symbol parameter",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "404": {
                        "description": "No position found",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to calculate risk",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve comprehensive system status including server, Binance connection, and Firebase stats",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get system status",
                "responses": {
                    "200": {
                        "description": "System status retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/summary": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve comprehensive trading statistics and performance metrics for a specified time period",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Analytics"
                ],
                "summary": "Get trading summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Time period: 1d, 7d, 1w, 1m (default: 1d)",
                        "name": "period",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID (optional)",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trading summary retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get trading summary",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/system/server-time": {
            "get": {
                "description": "Get current Binance server timestamp",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Get server time",
                "responses": {
                    "200": {
                        "description": "Server time retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to get server time",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/system/time": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get Binance server time and check if local time is synchronized",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Check time synchronization",
                "responses": {
                    "200": {
                        "description": "Time sync status retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to sync time",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/trade": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Execute a futures trade on Binance with stop loss and take profit. API key can be provided via X-API-Key header, Authorization Bearer token, or apiKey field in request body (useful for TradingView alerts).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Execute a new trade",
                "parameters": [
                    {
                        "description": "Trade parameters (apiKey field is optional for authentication)",
                        "name": "trade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TradeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trade executed successfully",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request or trade parameters",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - Trade execution failed",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/trade/{tradeId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a specific trade by its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Get trade by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Trade ID",
                        "name": "tradeId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trade retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.Trade"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "404": {
                        "description": "Trade not found",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/trades/{userId}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all trades for a specific user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trading"
                ],
                "summary": "Get user trades",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trades retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.TradeResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/models.Trade"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid API key",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error - Failed to fetch trades",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/websocket/start": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Start real-time WebSocket stream for order updates and account changes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket"
                ],
                "summary": "Start WebSocket user data stream",
                "responses": {
                    "200": {
                        "description": "WebSocket started successfully",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to start WebSocket",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/api/websocket/status": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Check the status of all active WebSocket connections",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "WebSocket"
                ],
                "summary": "Get WebSocket status",
                "responses": {
                    "200": {
                        "description": "WebSocket status retrieved",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/models.TradeResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the API server is running and healthy",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Server is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "binance.FundingRateHistory": {
            "type": "object",
            "properties": {
                "fundingRate": {
                    "type": "number"
                },
                "fundingTime": {
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "binance.FundingRateInfo": {
            "type": "object",
            "properties": {
                "fundingRate": {
                    "type": "number"
                },
                "fundingTime": {
                    "type": "integer"
                },
                "indexPrice": {
                    "type": "number"
                },
                "markPrice": {
                    "type": "number"
                },
                "nextFundingTime": {
                    "type": "integer"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "binance.LiquidationRisk": {
            "type": "object",
            "properties": {
                "distanceToLiquidation": {
                    "description": "Percentage",
                    "type": "number"
                },
                "entryPrice": {
                    "type": "number"
                },
                "leverage": {
                    "type": "integer"
                },
                "liquidationPrice": {
                    "type": "number"
                },
                "marginRatio": {
                    "type": "number"
                },
                "markPrice": {
                    "type": "number"
                },
                "positionSize": {
                    "type": "number"
                },
                "riskLevel": {
                    "description": "LOW, MEDIUM, HIGH, CRITICAL",
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "unrealizedPnl": {
                    "type": "number"
                }
            }
        },
        "models.CancelOrderRequest": {
            "type": "object",
            "properties": {
                "orderId": {
                    "description": "Optional: cancel specific order",
                    "type": "integer",
                    "example": 123456789
                },
                "symbol": {
                    "description": "Optional: cancel by symbol",
                    "type": "string",
                    "example": "BTCUSDT"
                }
            }
        },
        "models.ClosePositionRequest": {
            "type": "object",
            "required": [
                "symbol"
            ],
            "properties": {
                "symbol": {
                    "type": "string",
                    "example": "BTCUSDT"
                },
                "tradeId": {
                    "description": "Optional: link to Firebase trade",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "models.Trade": {
            "type": "object",
            "properties": {
                "closedAt": {
                    "type": "integer",
                    "example": 1640999800
                },
                "createdAt": {
                    "type": "integer",
                    "example": 1640995200
                },
                "entryPrice": {
                    "type": "number",
                    "example": 50000
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "executedAt": {
                    "type": "integer",
                    "example": 1640995260
                },
                "executedPrice": {
                    "type": "number",
                    "example": 50100.5
                },
                "id": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "leverage": {
                    "type": "integer",
                    "example": 10
                },
                "marginType": {
                    "description": "ISOLATED or CROSSED (default: ISOLATED)",
                    "type": "string",
                    "example": "ISOLATED"
                },
                "orderId": {
                    "type": "integer",
                    "example": 123456789
                },
                "orderType": {
                    "description": "MARKET or LIMIT",
                    "type": "string",
                    "example": "MARKET"
                },
                "pnl": {
                    "type": "number",
                    "example": 250.75
                },
                "side": {
                    "type": "string",
                    "example": "BUY"
                },
                "size": {
                    "type": "number",
                    "example": 1000
                },
                "slOrderId": {
                    "description": "Stop Loss order ID",
                    "type": "integer",
                    "example": 123456790
                },
                "status": {
                    "description": "PENDING, ACTIVE, FILLED, CANCELED, FAILED",
                    "type": "string",
                    "example": "ACTIVE"
                },
                "stopLoss": {
                    "type": "number",
                    "example": 49000
                },
                "symbol": {
                    "type": "string",
                    "example": "BTCUSDT"
                },
                "takeProfit": {
                    "type": "number",
                    "example": 52000
                },
                "tpOrderId": {
                    "description": "Take Profit order ID",
                    "type": "integer",
                    "example": 123456791
                },
                "userId": {
                    "type": "string",
                    "example": "user123"
                }
            }
        },
        "models.TradeRequest": {
            "type": "object",
            "required": [
                "entryPrice",
                "leverage",
                "side",
                "size",
                "stopLoss",
                "symbol",
                "takeProfit",
                "userId"
            ],
            "properties": {
                "apiKey": {
                    "description": "Optional: API key for authentication (useful for TradingView alerts)",
                    "type": "string",
                    "example": "your-api-key-here"
                },
                "entryPrice": {
                    "description": "Entry price",
                    "type": "number",
                    "example": 50000
                },
                "leverage": {
                    "description": "Leverage (1-125x)",
                    "type": "integer",
                    "maximum": 125,
                    "minimum": 1,
                    "example": 10
                },
                "marginType": {
                    "description": "\"ISOLATED\" or \"CROSSED\" (default: ISOLATED)",
                    "type": "string",
                    "example": "ISOLATED"
                },
                "orderType": {
                    "description": "\"MARKET\" or \"LIMIT\" (default: MARKET)",
                    "type": "string",
                    "example": "MARKET"
                },
                "side": {
                    "description": "\"BUY\" or \"SELL\"",
                    "type": "string",
                    "example": "BUY"
                },
                "size": {
                    "description": "Position size in USDT",
                    "type": "number",
                    "example": 1000
                },
                "stopLoss": {
                    "description": "Stop loss price",
                    "type": "number",
                    "example": 49000
                },
                "symbol": {
                    "description": "e.g., \"BTCUSDT\"",
                    "type": "string",
                    "example": "BTCUSDT"
                },
                "takeProfit": {
                    "description": "Take profit price",
                    "type": "number",
                    "example": 52000
                },
                "userId": {
                    "type": "string",
                    "example": "user123"
                }
            }
        },
        "models.TradeResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {
                    "type": "string",
                    "example": ""
                },
                "message": {
                    "type": "string",
                    "example": "Trade executed successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "timestamp": {
                    "type": "integer",
                    "example": 1640995200
                },
                "tradeId": {
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Enter your API key to access protected endpoints",
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "Health check endpoints",
            "name": "Health"
        },
        {
            "description": "Trading operations (place, view, close trades)",
            "name": "Trading"
        },
        {
            "description": "Account and balance information",
            "name": "Account"
        },
        {
            "description": "Position and order management",
            "name": "Positions"
        },
        {
            "description": "Order management and cancellation",
            "name": "Orders"
        },
        {
            "description": "System status and monitoring",
            "name": "System"
        },
        {
            "description": "Trading analytics and statistics",
            "name": "Analytics"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Crypto Trading API",
	Description:      "Professional cryptocurrency trading API with automated Stop Loss and Take Profit\nSupports Binance Futures trading with real-time monitoring and Firebase logging",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
